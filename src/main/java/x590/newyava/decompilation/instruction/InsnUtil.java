package x590.newyava.decompilation.instruction;

import lombok.experimental.UtilityClass;

import static org.objectweb.asm.Opcodes.*;

@UtilityClass
public class InsnUtil {
	public static String opcodeToString(int opcode) {
		return switch (opcode) {
			case NOP -> "nop";
			case ACONST_NULL -> "aconst_null";
			case ICONST_M1 -> "iconst_m1";
			case ICONST_0 -> "iconst_0";
			case ICONST_1 -> "iconst_1";
			case ICONST_2 -> "iconst_2";
			case ICONST_3 -> "iconst_3";
			case ICONST_4 -> "iconst_4";
			case ICONST_5 -> "iconst_5";
			case LCONST_0 -> "lconst_0";
			case LCONST_1 -> "lconst_1";
			case FCONST_0 -> "fconst_0";
			case FCONST_1 -> "fconst_1";
			case FCONST_2 -> "fconst_2";
			case DCONST_0 -> "dconst_0";
			case DCONST_1 -> "dconst_1";
			case BIPUSH -> "bipush";
			case SIPUSH -> "sipush";
			case LDC -> "ldc";
			case ILOAD -> "iload";
			case LLOAD -> "lload";
			case FLOAD -> "fload";
			case DLOAD -> "dload";
			case ALOAD -> "aload";
			case IALOAD -> "iaload";
			case LALOAD -> "laload";
			case FALOAD -> "faload";
			case DALOAD -> "daload";
			case AALOAD -> "aaload";
			case BALOAD -> "baload";
			case CALOAD -> "caload";
			case SALOAD -> "saload";
			case ISTORE -> "istore";
			case LSTORE -> "lstore";
			case FSTORE -> "fstore";
			case DSTORE -> "dstore";
			case ASTORE -> "astore";
			case IASTORE -> "iastore";
			case LASTORE -> "lastore";
			case FASTORE -> "fastore";
			case DASTORE -> "dastore";
			case AASTORE -> "aastore";
			case BASTORE -> "bastore";
			case CASTORE -> "castore";
			case SASTORE -> "sastore";
			case POP -> "pop";
			case POP2 -> "pop2";
			case DUP -> "dup";
			case DUP_X1 -> "dup_x1";
			case DUP_X2 -> "dup_x2";
			case DUP2 -> "dup2";
			case DUP2_X1 -> "dup2_x1";
			case DUP2_X2 -> "dup2_x2";
			case SWAP -> "swap";
			case IADD -> "iadd";
			case LADD -> "ladd";
			case FADD -> "fadd";
			case DADD -> "dadd";
			case ISUB -> "isub";
			case LSUB -> "lsub";
			case FSUB -> "fsub";
			case DSUB -> "dsub";
			case IMUL -> "imul";
			case LMUL -> "lmul";
			case FMUL -> "fmul";
			case DMUL -> "dmul";
			case IDIV -> "idiv";
			case LDIV -> "ldiv";
			case FDIV -> "fdiv";
			case DDIV -> "ddiv";
			case IREM -> "irem";
			case LREM -> "lrem";
			case FREM -> "frem";
			case DREM -> "drem";
			case INEG -> "ineg";
			case LNEG -> "lneg";
			case FNEG -> "fneg";
			case DNEG -> "dneg";
			case ISHL -> "ishl";
			case LSHL -> "lshl";
			case ISHR -> "ishr";
			case LSHR -> "lshr";
			case IUSHR -> "iushr";
			case LUSHR -> "lushr";
			case IAND -> "iand";
			case LAND -> "land";
			case IOR -> "ior";
			case LOR -> "lor";
			case IXOR -> "ixor";
			case LXOR -> "lxor";
			case IINC -> "iinc";
			case I2L -> "i2l";
			case I2F -> "i2f";
			case I2D -> "i2d";
			case L2I -> "l2i";
			case L2F -> "l2f";
			case L2D -> "l2d";
			case F2I -> "f2i";
			case F2L -> "f2l";
			case F2D -> "f2d";
			case D2I -> "d2i";
			case D2L -> "d2l";
			case D2F -> "d2f";
			case I2B -> "i2b";
			case I2C -> "i2c";
			case I2S -> "i2s";
			case LCMP -> "lcmp";
			case FCMPL -> "fcmpl";
			case FCMPG -> "fcmpg";
			case DCMPL -> "dcmpl";
			case DCMPG -> "dcmpg";
			case IFEQ -> "ifeq";
			case IFNE -> "ifne";
			case IFLT -> "iflt";
			case IFGE -> "ifge";
			case IFGT -> "ifgt";
			case IFLE -> "ifle";
			case IF_ICMPEQ -> "if_icmpeq";
			case IF_ICMPNE -> "if_icmpne";
			case IF_ICMPLT -> "if_icmplt";
			case IF_ICMPGE -> "if_icmpge";
			case IF_ICMPGT -> "if_icmpgt";
			case IF_ICMPLE -> "if_icmple";
			case IF_ACMPEQ -> "if_acmpeq";
			case IF_ACMPNE -> "if_acmpne";
			case GOTO -> "goto";
			case JSR -> "jsr";
			case RET -> "ret";
			case TABLESWITCH -> "tableswitch";
			case LOOKUPSWITCH -> "lookupswitch";
			case IRETURN -> "ireturn";
			case LRETURN -> "lreturn";
			case FRETURN -> "freturn";
			case DRETURN -> "dreturn";
			case ARETURN -> "areturn";
			case RETURN -> "return";
			case GETSTATIC -> "getstatic";
			case PUTSTATIC -> "putstatic";
			case GETFIELD -> "getfield";
			case PUTFIELD -> "putfield";
			case INVOKEVIRTUAL -> "invokevirtual";
			case INVOKESPECIAL -> "invokespecial";
			case INVOKESTATIC -> "invokestatic";
			case INVOKEINTERFACE -> "invokeinterface";
			case INVOKEDYNAMIC -> "invokedynamic";
			case NEW -> "new";
			case NEWARRAY -> "newarray";
			case ANEWARRAY -> "anewarray";
			case ARRAYLENGTH -> "arraylength";
			case ATHROW -> "athrow";
			case CHECKCAST -> "checkcast";
			case INSTANCEOF -> "instanceof";
			case MONITORENTER -> "monitorenter";
			case MONITOREXIT -> "monitorexit";
			case MULTIANEWARRAY -> "multianewarray";
			case IFNULL -> "ifnull";
			case IFNONNULL -> "ifnonnull";
			default -> "0x" + Integer.toHexString(opcode);
		};
	}
}
